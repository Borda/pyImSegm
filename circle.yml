version: 2.0

references:

  install_pips: &install_pips
    run:
      name: Install PyPI dependences
      command: |
        sudo apt-get update -qq
        sudo apt-get install git-lfs
        sudo apt-get install tk-dev pkg-config python-dev python-tk
        sudo pip install --upgrade pip setuptools
        sudo pip install -r ./tests/requirements.txt
        sudo pip install -U backports.functools_lru_cache  # required for matplotlib @py2
        pip install -r requirements.txt --user
        pip --version ; pip list

  test_coverage: &test_coverage
    run:
      name: Testing and Formating
      command: |
        unset DISPLAY
        mkdir output && mkdir results && mkdir test-reports
        coverage run --source imsegm -m py.test imsegm tests -v --doctest-modules --junitxml=test-reports/pytest_junit.xml
        python setup.py check --metadata --strict
        flake8 .

  build_project: &build_project
   run:
     name: Building project
     command: |
       gcc --version ; python --version ; pwd ; ls -l
       python setup.py build_ext --inplace

  install_project: &install_project
   run:
     name: Insatlling project
     command: |
       python setup.py install --user
       rm -rf imsegm

  make_docs: &make_docs
   run:
     name: Make Documentation
     command: |
       sudo apt-get install pandoc
       sudo pip install -r docs/requirements.txt
       # sphinx-apidoc -o ./docs/source ./imsegm **/test_* --force --follow-links
       cd docs
       make html --debug --jobs 2 SPHINXOPTS="-W"
       make latexpdf


jobs:
  Py3-Tests:
    docker:
      - image: circleci/python:3.6
    steps: &steps_test
      - checkout
      # INSTALLATION
      - *install_pips
      #- run: git lfs pull
      # BUILDING
      - *build_project
      # TESTING
      - *test_coverage

      # PASSING
      - run:
          name: Finalise
          command: |
            python setup.py install --user
            coverage report && coverage xml -o test-reports/coverage.xml

      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  Py3-Experiments:
    docker:
        - image: circleci/python:3.6
    steps: &steps_expt
      - checkout
      # INSTALLATION
      - *install_pips
      #- run: git lfs pull
      - *install_project

      - run: mkdir libs && mkdir output && mkdir results
      # ANNOTATION section
      - run: bash handling_annotations/test_annotations.sh
      # SEGMENTATION section
      - run: bash experiments_segmentation/test_segmentations.sh
      # CENTER DETECT. section
      - run: bash experiments_ovary_centres/test_ovary_centers.sh
      # REGION GROWING section
      - run: bash experiments_ovary_detect/test_ovary_detect.sh

  Py2-Tests:
    docker:
      - image: circleci/python:2.7
    steps: *steps_test

  Py2-Experiments:
    docker:
      - image: circleci/python:2.7
    steps: *steps_expt

  Build-Docs:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run:
          name: TexLive
          command: |
            sudo apt-get update -qq
            sudo apt-get install -y imagemagick ghostscript latexmk texlive texlive-latex-recommended texlive-fonts-recommended texlive-formats-extra
      # INSTALLATION
      - *install_pips
      # DOCUMENTATION
      - *make_docs

workflows:
  version: 2
  build:
    jobs:
      - Py2-Tests
      - Py3-Tests
      - Py2-Experiments
      - Py3-Experiments
      - Build-Docs
